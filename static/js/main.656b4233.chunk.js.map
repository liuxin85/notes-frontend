{"version":3,"sources":["components/Note/Note.tsx","DUMMY_NOTES.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Note","note","onNoteUpdate","className","onBlur","event","newTextValue","currentTarget","textContent","text","console","log","updatedNoteObject","contentEditable","suppressContentEditableWarning","href","link","DUMMY_NOTES","_id","App","useState","notesList","setNotesList","useEffect","listFromStorageString","localStorage","getItem","listFromStorageArray","JSON","parse","notesListString","stringify","setItem","updateNoteItem","updatedNote","updatedList","map","noteItem","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAwCeA,EA/BS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAc/B,OACE,sBAAKC,UAAU,OAAf,UACE,qBACEC,OAhBkB,SAACC,GACvB,IAAMC,EAAeD,EAAME,cAAcC,YACzC,GAAIF,IAAiBL,EAAKQ,KAA1B,CAGAC,QAAQC,IAAI,qBACZ,IAAMC,EAAwB,2BACzBX,GADyB,IAE5BQ,KAAMH,GAAgB,KAGxBJ,EAAaU,KAMTC,iBAAe,EACfC,gCAA8B,EAC9BX,UAAU,aAJZ,gBAMGF,QANH,IAMGA,OANH,EAMGA,EAAMQ,OAET,qBAAKN,UAAU,aAAf,SACE,mBAAGY,KAAMd,EAAKe,KAAd,gBAAqBf,QAArB,IAAqBA,OAArB,EAAqBA,EAAMe,aCLpBC,EA3Bc,CAC3B,CACEC,IAAK,IACLT,KAAM,iBACNO,KAAM,mCAER,CAAEE,IAAK,IAAKT,KAAM,YAAaO,KAAM,oBACrC,CACEE,IAAK,IACLT,KAAM,iBACNO,KAAM,mCAER,CAAEE,IAAK,IAAKT,KAAM,YAAaO,KAAM,oBACrC,CACEE,IAAK,IACLT,KAAM,iBACNO,KAAM,mCAER,CAAEE,IAAK,IAAKT,KAAM,YAAaO,KAAM,oBACrC,CACEE,IAAK,IACLT,KAAM,iBACNO,KAAM,mCAER,CAAEE,IAAK,IAAKT,KAAM,YAAaO,KAAM,qBCuCxBG,MA1Df,WAAgB,IAAD,EACqBC,mBAAuB,IAD5C,mBACNC,EADM,KACKC,EADL,KAIbC,qBAAU,WACR,IAAMC,EAAwBC,aAAaC,QAAQ,YACnD,GAAIF,EAAuB,CACzB,IAAMG,EAAuBC,KAAKC,MAAML,GACxCF,EAAaK,QAEbL,EAAaL,KAEd,IAEHM,qBAAU,WACRb,QAAQC,IAAI,uBACZ,IAAMmB,EAAkBF,KAAKG,UAAUV,GACvCI,aAAaO,QAAQ,WAAYF,KAChC,CAACT,IAYJ,IAAMY,EAAiB,SAACC,GACtBxB,QAAQC,IAAI,uCACZD,QAAQC,IAAIuB,GAGZ,IAAMC,EAAcd,EAAUe,KAAI,SAACC,GACjC,OAAIA,EAASnB,MAAQgB,EAAYhB,IACxBgB,EAEFG,KAET3B,QAAQC,IAAIwB,GACZb,EAAaa,IAGf,OACE,qBAAKhC,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAf,SACGkB,EAAUe,KAAI,SAACC,EAAUC,GACxB,OACE,cAAC,EAAD,CAAMrC,KAAMoC,EAAUnC,aAAc+B,GAAqBK,WC3CtDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.656b4233.chunk.js","sourcesContent":["import React, { FC, FocusEvent } from \"react\";\nimport INote from \"../../interfaces/note.inferface\";\nimport \"./Note.css\";\n\ntype Props = {\n  note: INote;\n  onNoteUpdate: (note: INote) => void;\n};\n\nconst Note: FC<Props> = ({ note, onNoteUpdate }) => {\n  const noteTextUpdated = (event: FocusEvent<HTMLDivElement>) => {\n    const newTextValue = event.currentTarget.textContent;\n    if (newTextValue === note.text) {\n      return;\n    }\n    console.log(\"note text changed\");\n    const updatedNoteObject: INote = {\n      ...note,\n      text: newTextValue || \"\",\n    };\n\n    onNoteUpdate(updatedNoteObject);\n  };\n  return (\n    <div className=\"note\">\n      <div\n        onBlur={noteTextUpdated}\n        contentEditable\n        suppressContentEditableWarning\n        className=\"note__text\"\n      >\n        {note?.text}\n      </div>\n      <div className=\"note__link\">\n        <a href={note.link}>{note?.link}</a>\n      </div>\n    </div>\n  );\n};\n\nexport default Note;\n","import INote from \"./interfaces/note.inferface\";\n\nconst DUMMY_NOTES: INote[] = [\n  {\n    _id: \"1\",\n    text: \"Ahsan's Twitch\",\n    link: \"https://twitch.tv/codewithahsan\",\n  },\n  { _id: \"2\", text: \"Get a job\", link: \"https://rozee.pk\" },\n  {\n    _id: \"3\",\n    text: \"Ahsan's Twitch\",\n    link: \"https://twitch.tv/codewithahsan\",\n  },\n  { _id: \"4\", text: \"Get a job\", link: \"https://rozee.pk\" },\n  {\n    _id: \"5\",\n    text: \"Ahsan's Twitch\",\n    link: \"https://twitch.tv/codewithahsan\",\n  },\n  { _id: \"6\", text: \"Get a job\", link: \"https://rozee.pk\" },\n  {\n    _id: \"7\",\n    text: \"Ahsan's Twitch\",\n    link: \"https://twitch.tv/codewithahsan\",\n  },\n  { _id: \"8\", text: \"Get a job\", link: \"https://rozee.pk\" },\n];\n\nexport default DUMMY_NOTES;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Note from \"./components/Note/Note\";\n// import axios from \"axios\";\nimport DUMMY_NOTES from \"./DUMMY_NOTES\";\nimport INote from \"./interfaces/note.inferface\";\n\nfunction App() {\n  const [notesList, setNotesList] = useState<Array<INote>>([]);\n\n  // App components renders the first time\n  useEffect(() => {\n    const listFromStorageString = localStorage.getItem(\"my-notes\");\n    if (listFromStorageString) {\n      const listFromStorageArray = JSON.parse(listFromStorageString);\n      setNotesList(listFromStorageArray);\n    } else {\n      setNotesList(DUMMY_NOTES);\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log(\"save to localstrage\");\n    const notesListString = JSON.stringify(notesList);\n    localStorage.setItem(\"my-notes\", notesListString);\n  }, [notesList]);\n\n  // getNotes fuctions\n  // const getNotes = async () => {\n  //   try {\n  //     const response = await axios.get(\"http://localhost:5000/notes\");\n\n  //     setNotesList(response.data.notes);\n  //   } catch (err) {\n  //     console.error(err);\n  //   }\n  // };\n  const updateNoteItem = (updatedNote: INote) => {\n    console.log(\"value updated in the app components\");\n    console.log(updatedNote);\n\n    // temporary variable\n    const updatedList = notesList.map((noteItem: INote) => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n      return noteItem;\n    });\n    console.log(updatedList);\n    setNotesList(updatedList); // updating the state of noteslist\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"notes-list\">\n        {notesList.map((noteItem, index) => {\n          return (\n            <Note note={noteItem} onNoteUpdate={updateNoteItem} key={index} />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}